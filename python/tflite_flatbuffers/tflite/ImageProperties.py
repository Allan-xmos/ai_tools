# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers

class ImageProperties(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsImageProperties(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ImageProperties()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def ImagePropertiesBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x4D", size_prefixed=size_prefixed)

    # ImageProperties
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ImageProperties
    def ColorSpace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ImageProperties
    def DefaultSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .ImageSize import ImageSize
            obj = ImageSize()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ImagePropertiesStart(builder): builder.StartObject(2)
def ImagePropertiesAddColorSpace(builder, colorSpace): builder.PrependInt8Slot(0, colorSpace, 0)
def ImagePropertiesAddDefaultSize(builder, defaultSize): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(defaultSize), 0)
def ImagePropertiesEnd(builder): return builder.EndObject()
