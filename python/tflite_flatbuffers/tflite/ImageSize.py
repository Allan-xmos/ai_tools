# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers

class ImageSize(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsImageSize(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ImageSize()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def ImageSizeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x4D", size_prefixed=size_prefixed)

    # ImageSize
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ImageSize
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ImageSize
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ImageSizeStart(builder): builder.StartObject(2)
def ImageSizeAddWidth(builder, width): builder.PrependUint32Slot(0, width, 0)
def ImageSizeAddHeight(builder, height): builder.PrependUint32Slot(1, height, 0)
def ImageSizeEnd(builder): return builder.EndObject()
