# Copyright (c) 2019, XMOS Ltd, All rights reserved
import subprocess
from shutil import copyfile
import os
from itertools import product, starmap

import xwaf.utils.configs as xutils

CMD_LINE_BUFFER_BYTES = 256

XN_FILE_MAP = {
    '600MHz': '../config/XU316-1024-QF60-C20-600MHz.xn',
    '750MHz': '../config/XU316-1024-QF60-C20-750MHz.xn',
    '800MHz': '../config/XU316-1024-QF60-C20-800MHz.xn'
}

def options(ctx):
    ctx.add_option('--config', action='store', default='800MHz')
    ctx.add_option('--target', action='store', default=None)

def list_configs(ctx):
    for config in CONFIGS.keys():
        print(config)

def configure(conf):
    xutils.configure_configs(conf, CONFIGS, SHARED_FLAGS)

def build(bld):
    if not xutils.check_build_config(bld, CONFIGS):
        return

    bld.env.PROJECT_ROOT = '../../..'
    bld.env.TARGET_ARCH = XN_FILE_MAP[bld.variant]
    bld.env.XCC_XC_FLAGS = bld.env.XCC_FLAGS

    params = {}
    params['depends_on'] = ['lib_nn_operator']
    params['source'] = []
    params['source'].extend(bld.path.ant_glob('src/**/*.xc'))
    params['source'].extend(bld.path.ant_glob('src/**/*.c' ))
    params['source'].extend(bld.path.ant_glob('src/**/*.S' ))
    params['includes'] = ['src/']
    
    ht = bld.options.target is not None
    if ht: params['target'] = 'bin/' + bld.options.target

    bld.program(**params)

SHARED_FLAGS = ['-Os',
                '-g',
                '-Wall',
                '-report',
                '-fcmdline-buffer-bytes={}'.format(CMD_LINE_BUFFER_BYTES)
                ]

CONFIGS = {
    '600MHz': ['-DTEST_DEBUG_ON=0'],
    '750MHz': ['-DTEST_DEBUG_ON=0'],
    '800MHz': ['-DTEST_DEBUG_ON=0']
}

xutils.register_configs(CONFIGS)

