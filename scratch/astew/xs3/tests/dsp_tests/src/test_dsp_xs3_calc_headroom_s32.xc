
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <assert.h>

#include "tst_common.h"

#include "dsp_xs3_vector.h"
#include "Unity.h"
#include "xs3_vpu.h"

#ifdef __XC__
#define WORD_ALIGNED [[aligned(4)]]
#else
#define WORD_ALIGNED
#endif

unsigned seed = 345623;

//Case 1: single values
#define DEBUG_ON (0)
static void _test_dsp_xs3_calc_headroom_s32_case1()
{

    typedef struct {
        int32_t val;
        unsigned exp_hr;
    } test_case;


    test_case cases[] = {
        {   0x00000000,   31},
        {   0x00000001,   30},
        {   0xFFFFFFFF,   31}, // -1
        {   0xFFFFFFFE,   30}, // -2
        {   0x0000FFFF,   15},
        {   0xFFFF0000,   15}, // -0x0000FFFF
        {   0x3FFFFFFF,    1},
        {   0x40000000,    0},
        {  -0x40000000,    1},
    };

    const unsigned N = sizeof(cases)/sizeof(test_case);

    for(int u = 0; u < N; u++){
#if DEBUG_ON
        printf("Starting case %u\n", u);
#endif

        int32_t dater[1];

        dater[0] = cases[u].val;

        unsigned hr_c   = dsp_xs3_calc_headroom_s32_c(dater, 1);
        unsigned hr_asm = dsp_xs3_calc_headroom_s32_asm(dater, 1);

#if DEBUG_ON
        printf("val: %ld\t\t(0x%08X)\n", dater[0], dater[0]);
        printf("hr_c:\t%u\n", hr_c);
        printf("hr_asm:\t%u\n", hr_asm);
#endif

        TEST_ASSERT_EQUAL_MESSAGE(cases[u].exp_hr, hr_c,   "Calculated headroom was incorrect. (C)");
        TEST_ASSERT_EQUAL_MESSAGE(cases[u].exp_hr, hr_asm, "Calculated headroom was incorrect. (ASM)");
        
    }
}
#undef DEBUG_ON


//Case 2: short arrays
#define DEBUG_ON (0)
#define N (7)
static void _test_dsp_xs3_calc_headroom_s32_case2()
{

    int32_t cases[][N] = {
        {332055210, 2030787, -172789, -21879, 905, 215606984, 88},
        {-80865, 32480123, -21814, 692, -14815373, 1, -15},
        {1764977, -5330431, -17574845, -1269, -6044, 0, -1084338},
        {-828982, -13542, 0, -504, 847412, -1076, -52182},
        {18, -4007545, -4, 69110, 26, 781086, 14},
        {4841, 274, 1062275331, -11, 222260, -935264, 9398},
        {-184898464, 72380439, -2, -6212, -29365, 943, -406},
        {-94495339, -18411122, -400627926, 48, 15, -699871840, -74805488},
        {-282147857, -295213, 313129, 409722443, -11, -138, -146210467},
        {86, 20368420, -104, 3444505, -472959, 79014, -512975},
        {43929806, 4095071, 15803, -5912, -550, 365971, 0},
        {-3761, 34402, -1639506, 45637, 1191, -85632234, 118112490},
    };

    const unsigned M = sizeof(cases)/(N*sizeof(int32_t));

    for(int u = 0; u < M; u++){
#if DEBUG_ON
        printf("Starting case %u\n", u);
#endif
        unsigned hr_c   = dsp_xs3_calc_headroom_s32_c(cases[u], 1);
        unsigned hr_asm = dsp_xs3_calc_headroom_s32_asm(cases[u], 1);

#if DEBUG_ON
        printf("hr_c:\t%u\n", hr_c);
        printf("hr_asm:\t%u\n", hr_asm);
#endif

        TEST_ASSERT_EQUAL_MESSAGE(hr_c, hr_asm,   "Calculated headroom from ASM function did not match C function.");
    }
}
#undef N
#undef DEBUG_ON

//Case 3: other stuff
#define DEBUG_ON (0)
#define DATA_LEN (26)
static void _test_dsp_xs3_calc_headroom_s32_case3()
{

    int32_t data[DATA_LEN] = {
        -1660787, -27739, -231, 15, 218, 3443, 250450849, 582826, 4, 17, 523, 6203, -178179395, 833, 16705584, -46957, 0, 3, -1, 0, 13, -43477075, 3836726, 47, -356, 186169608,
    };

    for(int u = 0; u < DATA_LEN; u++){
#if DEBUG_ON
        printf("Starting case %u\n", u);
#endif
        unsigned hr_c   = dsp_xs3_calc_headroom_s32_c(  data, u);
        unsigned hr_asm = dsp_xs3_calc_headroom_s32_asm(data, u);

#if DEBUG_ON
        printf("hr_c:\t%u\n", hr_c);
        printf("hr_asm:\t%u\n\n", hr_asm);
#endif

        TEST_ASSERT_EQUAL_MESSAGE(hr_c, hr_asm,   "Calculated headroom from ASM function did not match C function.");
    }
}
#undef DATA_LEN
#undef DEBUG_ON


//Case 4: some random stuff
#define DEBUG_ON (0)
#define DATA_LEN (1024)
#define MAX_CASE_LEN (64) //shorter lengths here give more variation in results
#define N_CASES (256)
static void _test_dsp_xs3_calc_headroom_s32_case4()
{

    int32_t data[DATA_LEN] = {
        -1660787, -27739, -231, 15, 218, 3443, 250450849, 582826, 4, 17, 523, 6203, -178179395, 833, 16705584, -46957, 0, 3, -1, 0, 13, -43477075, 3836726, 47, -356, 186169608, -1, 154892, 452967, 55339887, 4808, 112, 81096, -5, 3, 1, 0, 76666133, 21554, -1, -270, -28232089, 716, -40, 461116453, 33277572, -1, 476452, 13304, 88, 660935, -24327551, 2824, -197, 7687135, -2, 312686, 468003949, 9744966, -5, -158, -49004, -22795770, -1563327, -15706814, -2019, 105107577, 0, -1, -1, 16, 48, 3215, -144, -520635, -1, -5987185, 1480, -15, 0, 66864, 1705008, 660, -548427, -2, -63, -652801407, 2245704, 1403870, -15631612, 1419, -12, -1556, -72, -19327, 8344296, -234490087, -59918, -2, 190, -348509, 31433329, -3318639, 108948, 7826, 146072, 30056, -13, -1181, -2716199, 88693, -535633, 261231, -4651011, 0, 8, 57379, 31, -1000, 3029, -3736074, -295, -49, 0, -3969, -23, -120177, 81, -2852337, -296871095, 221697, -198549153, 51024078, -5, 1001, -2525, 4759, -2058011, -2174, 6225081, 11586270, -331, -8018115, -49749812, 100717271, -11607, -542662, -1, 12432, -4416, -8865, -5058449, 0, 635391032, 23961, 744882, 300, 0, -787486998, 5103396, -91, -4452795, -4, -113786, -44, -513112, -427698772, 1865831, -123, -16, -12648, 2, -61, 100, 486950, -7640, -1518, 18, 509, -959, 438307733, 7403706, 115387, -522935, 14520708, -935424, -106765, -1208986, 1093664, -29710071, -538591, 0, 194402, 0, 7, 4, -13486, 308469857, -20015317, 1085, -26, 28987765, 261, -65784, -1040, -1, -14929, -14863, -447369263, 3456905, 2613, -5, 76, 46871991, -1371, -1253, -42, 10, 1559, 145783284, -1, 160, 2347006, 3, -13, 234302916, 45, 87, 6316, 632890, 31734548, 68375457, -222, 12309, 3661, -89637, -19300220, 16389, 1833, -523962983, -343, -137520800, 1, -40, 1015, 43184, 84705, -53, -1, -738881484, 960421, 25158963, -2056250, 60953, -105591877, 212, 8000479, 3272, -1815110, -177, 84, -54812506, -461724221, -5795, -3164673, 2, -4003190, -714, -5, 6529, -120, -96, 55965639, -2, -7, -24, 3549, 0, -106, -301586946, 1014976619, -1, 658, -937426, 39872658, -10222, -780439, -61584, 3757406, 23, -1, -32522, 7514043, -497286, -4903, 4017747, 460327383, 69232, -33990, 95546, -25, 312, -1364, 2885, -42817, 742091, 200304410, 12175483, -87137777, -356, 221247, 24, -5846, -67589, -129680909, -22, -298490851, -9282652, 13, -31, -40, -460, 37126, -3, 1, -1174, 19786969, 222, 125954, -205, 481942, -2, -129645016, -32129, -25, -230, 288471542, 32742492, -1020901, 3982, 372362258, 21, 1305, -1491, -8388180, 7785, -1937807, -252509, -17754, -13541179, 2, -97, -122122, -6657816, 29225738, -82312678, 446, -126, 25434587, -2658750, 0, 7488, 41154415, 303995, -1439, -207, -258086, 1753312, 111604668, 10007, -5143, -2813444, 1, -242938161, -2, 343385, 404325314, 642, 766811, -257612, -78, -4719820, 31726, 115892, 16535362, -3739488, 6, -2048811, -26551305, -92296790, -453, -1922, -2, -29300833, 341698271, -27885, -296904, 4023294, -484811598, 0, -29543, -27491944, -304, -3, 1215, 168364, -702703, -3, -7, -314, -157, -116114827, 51050, -14, -1, 6042007, -1, -118, -2, -2803650, 7, -1, 265001309, -97622, 71022926, 2334507, 8, -237, -8080, -90222, -218554, -409965, -28726054, -4, -170, -23238, -483750562, -34, 3171, -160792, -1022224, -257, 2328000, -26855141, -25, -2, 192598537, 74760, 259, -1102, -51, 1430155, 0, 38, -5930217, -23890671, -28549, 212997, 0, 266550, 3, -3088319, -8068030, -119355045, -197, 14718205, -2, 95, 14, -14152, 23, 17, 654794, 4450, 10, -63086953, -210454, -154, 247, -7301, 43, -20179, -26158, 10, 14, -70911, -112139796, -22737, -165604, 15932897, 26848, 49288, 915554, 115, -61280, 47970399, -106385, -2429, 16489233, 122591, -117903657, -2217, -4, -55159822, 1, 8480728, -4146, 3, -65480, -241486, 244430408, -54944, -459, 4698, 30, -21, -60189308, 664042, 209410, -1756774, -94, -383, 14468, 10, -26467, -43285, 48202, -618581, 88, 210, -11, -4, 0, 381458928, 12362, 64, -198, -245437706, -4525397, 24, -1525924, -805, -111532471, -1, 2, 171342881, -5307208, -38, -1, 0, -208, -10, -9016256, -1, 181391329, -655, 7, 1, 137, -30212, -73374863, 394, 2679676, 1348769, 36363377, 151, -4945705, -99909, 225004595, 16060348, 0, 0, 3228, 174522, -1, 62658904, -60, -16000894, 1331, -8888, 5777145, 0, 28614334, -573, -663478527, -5741, -73, -1953465, -476522, 11015600, -1977, -6959655, 5613953, -590331, 946933, 0, 2830, -585, -158393652, 1709019, 0, 0, 1364223, 304, -215, -3, -3136, 7493300, -1, 3, -9536, 132527, -2, -233079087, -3333083, 4453958, -1880, -8, 7852314, 8178573, 29943, -11, -1, 0, 140, 11, -38949, -12, 0, 25521622, -15412934, -44959, -530, 8329400, 60759744, 89757, -1938358, 730231557, 0, -21, -1, 15111274, 1160221, -13914785, 36029787, -54983170, -7646434, 14541272, -236214, 382840894, -1, -795, -26160, -275005, -453137, -131707361, 47677560, 26423389, -260, -29210, 72911026, -39, -6, 580582, -534875783, 680110, -10, -8001428, -8294891, 468350, -8465, -39759308, 53561375, 173613, -752551, -10815348, 1, -183, 833, -112801, -51869166, 22172909, 31, 0, 7, 11, -64149, 12408487, 1, -1, 43, 2194, 3551051, -84719879, 87, 775, -46, 72, -307220, 141391, 130273097, -2, 34453, 114, -290242124, 60, 899777, -14396, -17, 219, 89, -1518, -3690626, 0, 35198503, 172, 408, -13, -4388, 27041, 452121, 1, -1, 8802, 3, -63, 484148600, -24, -70174367, 162933, -64, -19780143, -1, 12440, 843119, 0, 68, 13264384, 917, -20730015, -3955, -5633, -589385076, 1952, -1206, 337264, -22189352, 60, 1734, 3703, -2, -10071410, -8308, -2, 2, 4518, 3375, -810078, -19, 7098466, -308, 362, -472877621, 34105, -250490, -122180, 16401527, -12, -551, -3269507, 941228, -4, -25, 1, 594705332, 56, 2016994, -64980224, -6440447, -90687, 45251, 536646265, 7809, 58, -30981, 1, 6, -799032709, 121007, -65970996, 82196053, 13474586, 513, -1387220, -1200, -3980581, 102848, 354040, -65, 7697, 599730519, 6970180, 3366, 3851036, 413103, -328636, -380333304, 38240, -13245170, -173, 26808, 665824, -240473, 4943980, -59029229, -521, 46, -1147, -33, 108243, 227778816, 3270651, -21, -38936897, 7, -1383183, 0, -4, -949, -1765, -14, 571, -2, -1503, -21, -29, -3, -2096267, 158, -13, 0, -1, 18, 177684, -68986, 25, -7, -1262, -1878, -1, 2, 49566760, -32215, 7512120, -123, 11531, -1, 535844554, -2, 327273103, -22757922, 0, -757969150, -1, -18210281, 544223242, -30312, 238015, -3576144, 250392, -7, 209761, -8, -611731, 33574, -19119627, 5, 1, 701994, 514008504, 107848, 2482, 59, -26760870, -6019167, 72, -1868226, -2, 862121, -109080, 4313682, -253, 39, -184237, 138968942, 2074423, -869489, -168, 3, 32293, 0, -1490525, 865, -3, -655603, 8, -1, 192429813, -2, 458381, 13, 84068, 467, 64712731, -258, 1024827, -15982260, -417, -22882236, -15962931, 1, -59409340, 7690, -3643622, 26514748, 524268945, -2548, -12, 46, 3648482, -28, -2601, 6, -4439, -5994, 563645, 11624, 453917700, -25, 3467204, 237288902, 1767091, -52207, -17832, 1820, 5915437, 1703945, 1, -16283, 389904, -13283919, 220, -29764, 1724, -316905718, 14123089, -20682410, 368, 4871, -3303, 43633, 486247010, -15152988, -4, 789, -294213079, 80473026, -7361, -78736163, 12, -17563557, 2322, -3218618, 61127, 1, 499267, -405, -1, 421162728, 9, 0, -2068, 0, -3539594, -104315086, -4, -70406959, 28589, 205, 97, -15643, -1, 901103, 401184, -149, -1, 113, -4329941, -12, 2, -69495, 13217609, -14122021, -4750, -988, -25533362, 75, 15, 971336, 446, 141348359, -844, 1, 54929, -8706758, 25067, 30, -2, -308693, -15483, 105300, 786131775, 658, 82761,
    };

    for(int u = 0; u < N_CASES; u++){
#if DEBUG_ON
        printf("Starting case %u\n", u);
#endif

        unsigned length = pseudo_rand_uint16(&seed) % MAX_CASE_LEN;

        unsigned max_offset = DATA_LEN - length - 1;
        unsigned offset = pseudo_rand_uint16(&seed) % max_offset;

#if DEBUG_ON
        printf("length: %u\n", length);
        printf("max offset: %u\n", max_offset);
        printf("offset: %u\n", offset);
        if(0){
            printf("data: {");
            for(int i = 0; i < length; i++){
                printf("%ld, ", data[offset+i]);
            }
            printf("}\n");
        }
#endif

        unsigned hr_c   = dsp_xs3_calc_headroom_s32_c(  &data[offset], length);
        unsigned hr_asm = dsp_xs3_calc_headroom_s32_asm(&data[offset], length);

#if DEBUG_ON
        printf("hr_c:\t%u\n", hr_c);
        printf("hr_asm:\t%u\n\n", hr_asm);
#endif

        TEST_ASSERT_EQUAL_MESSAGE(hr_c, hr_asm,   "Calculated headroom from ASM function did not match C function.");
    }
}
#undef N_CASES
#undef MAX_CASE_LEN
#undef DATA_LEN
#undef DEBUG_ON

void test_dsp_xs3_calc_headroom_s32()
{
    _test_dsp_xs3_calc_headroom_s32_case1();
    _test_dsp_xs3_calc_headroom_s32_case2();
    _test_dsp_xs3_calc_headroom_s32_case3();
    _test_dsp_xs3_calc_headroom_s32_case4();
}